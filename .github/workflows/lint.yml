name: Lint

on: [pull_request]

jobs:
  test:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack@0.6.21,cargo-docs-rs@1.0.0

      - name: Run Lint
        run: |
          cargo hack clippy --each-feature --exclude-features ic_ref_tests --no-dev-deps --verbose -- -D warnings
          cargo clippy --features ic_ref_tests --verbose --tests --benches -- -D warnings
        env:
          RUST_BACKTRACE: 1

      - name: Run Lint (WASM)
        run: CARGO_TARGET_DIR=target/wasm cargo clippy --target wasm32-unknown-unknown -p ic-agent --features wasm-bindgen -p ic-utils --verbose -- -D warnings

      - name: Run Lint (docs)
        run: RUSTDOCFLAGS="-Dwarnings" cargo doc --no-deps

      - name: Check docs.rs build
        run: |
          rustup update nightly
          rustup target add wasm32-unknown-unknown --toolchain nightly
          for package in $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.publish == null and (.targets | any(.kind == ["lib"]))) | .name')
          do
            CARGO_TARGET_DIR=target/nightly cargo +nightly docs-rs -p "$package" 
          done

  aggregate:
    name: lint:required
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: test
    steps:
      - name: Check lint result
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
